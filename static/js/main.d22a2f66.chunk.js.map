{"version":3,"sources":["components/Button/Button.js","components/Calculator/Calculator.js","components/OutputScreenRow/OutputScreenRow.js","logo.svg","App.js","serviceWorker.js","index.js"],"names":["Button","props","type","value","label","onClick","handleClick","defaultProps","Calculator","state","question","answer","bind","className","this","event","target","ans","eval","Infinity","err","setState","undefined","str","String","substr","length","Component","OutputScreenRow","readOnly","module","exports","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d22a2f66.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst Button = (props) => { \n  return ( \n    <input \n      type=\"button\"\n      value={props.label} \n      onClick = {props.handleClick}\n    /> \n  ); \n}\n\nButton.propTypes = {};\n\nButton.defaultProps = {};\n\nexport default Button;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n//import Button from './components/Button/Button';\nimport OutputScreenRow from '../OutputScreenRow/OutputScreenRow';\nimport Button from '../Button/Button';\n\n\nclass Calculator extends Component {\n  constructor() {\n    super();\n\n    // set our default state \n    this.state = {\n      question: '',\n      answer: ''\n    }\n\n    // Bind our handleClick method (sets 'this' explicitly \n    // to refer to this componenent) We did this because 'this' \n    // would refer to the source of the click events \n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  render() {\n    return <div className=\"frame\">\n      <div className=\"mainCalc\">\n        <OutputScreenRow value={this.state.answer ? this.state.answer : this.state.question} />\n        <div className=\"button-row\">\n\n          <Button label={'Clear'} handleClick={this.handleClick} />\n          <Button label={'Delete'} handleClick={this.handleClick} />\n          <Button label={'.'} handleClick={this.handleClick} />\n          <Button label={'/'} handleClick={this.handleClick} />\n        </div>\n        <div className=\"button-row\">\n          <Button label={'7'} handleClick={this.handleClick} />\n          <Button label={'8'} handleClick={this.handleClick} />\n          <Button label={'9'} handleClick={this.handleClick} />\n          <Button label={'*'} handleClick={this.handleClick} />\n        </div>\n        <div className=\"button-row\">\n          <Button label={'4'} handleClick={this.handleClick} />\n          <Button label={'5'} handleClick={this.handleClick} />\n          <Button label={'6'} handleClick={this.handleClick} />\n          <Button label={'-'} handleClick={this.handleClick} />\n        </div>\n        <div className=\"button-row\">\n          <Button label={'1'} handleClick={this.handleClick} />\n          <Button label={'2'} handleClick={this.handleClick} />\n          <Button label={'3'} handleClick={this.handleClick} />\n          <Button label={'+'} handleClick={this.handleClick} />\n        </div>\n        <div className=\"button-row\">\n          <Button label={'0'} handleClick={this.handleClick} />\n          <Button label={'='} handleClick={this.handleClick} />\n        </div>\n      </div>\n    </div>;\n  }\n\n\n\n  // our method to handle all click events from our buttons \n  handleClick(event) {\n\n    // get the value from the target element (button) \n    const value = event.target.value;\n    switch (value) {\n      case '=': {\n\n        if (this.state.question !== '') {\n          var ans = '';\n          try {\n            ans = eval(this.state.question);\n            if (ans == Infinity) {\n              ans = 0;\n            }\n          }\n          catch (err) {\n\n            this.setState({ answer: \"Math Error\" });\n          }\n          if (ans === undefined) {\n            this.setState({ answer: \"Math Error\" });\n          }\n          // update answer in our state. \n          else {\n            this.setState({ answer: ans, question: '' });\n          }\n          this.setState({ question: ans, answer: '' });\n          break;\n        }\n\n      }\n      case 'Clear': {\n\n        // if it's the Clears sign, just clean our \n        // question and answer in the state \n        this.setState({ question: '', answer: '' });\n        break;\n      }\n\n      case 'Delete': {\n        var str = String(this.state.question);\n        str = str.substr(0, str.length - 1);\n        this.setState({ question: str });\n        break;\n      }\n\n      default: {\n\n        // for every other command, update the answer in the state \n        this.setState({ question: this.state.question += value })\n        break;\n      }\n    }\n  }\n}\n\nCalculator.propTypes = {};\n\nCalculator.defaultProps = {};\n\n\nexport default Calculator;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst OutputScreenRow = (props) => (\n  <div className=\"screen-row\"> \n      <input type=\"text\" readOnly value = {props.value} /> \n    </div> \n);\n\nOutputScreenRow.propTypes = {};\n\nOutputScreenRow.defaultProps = {};\n\nexport default OutputScreenRow;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Calculator from './components/Calculator/Calculator';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}